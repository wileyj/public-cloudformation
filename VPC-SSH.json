{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Bastion VPC",
    "Parameters" : {
        "VPCName" : {
            "Type" : "String",
            "Description" : "Lowercase VPCName",
            "Default" : "ssh"
        },
        "Environment":{
            "Type": "String",
            "Description": "Default Environment for the VPC, which is prod",
            "Default": "prod"
        },
        "Domain" : {
            "Type" : "String",
            "Description" : "Name of the Domain",
            "Default" : "domain.com"
        },
        "BastionTcpPort": {
            "Type": "String",
            "Description": "SSHPort",
            "Default": "22"
        },
        "SSHFrom": {
            "Type": "String",
            "Description": "CIDR to allow ssh from",
            "Default": "0.0.0.0/0"
        }
    },
    "Mappings" : {
        "AWSRegionArch2AMI": {
            "us-east-1" : {
                "minhvm"        : "ami-12345678",
                "minebs"        : "ami-12345678",
                "hvmgp2"        : "ami-12345678",
                "hvmebs"        : "ami-12345678",
                "pvebs"         : "ami-12345678",
                "pvinstance"    : "ami-12345678"
            }
        },
        "AWSInstanceType2Arch" : {
            "m3.medium" : {   "bastion" : "minebs" },
            "m4.large" :  {   "bastion": "minhvm" }
        },
        "SubnetConfig" : {
            "web" : {
                "VPC"        : "10.1.0.0/16",
                "PublicAZ1"  : "10.1.100.0/23",
                "PublicAZ2"  : "10.1.102.0/23",
                "PrivateAZ1" : "10.1.0.0/23",
                "PrivateAZ2" : "10.1.2.0/23",
                "NATAZ1"     : "10.1.253.0/24",
                "NATAZ2"     : "10.1.254.0/24"
            },
            "app" : {
                "VPC"        : "10.2.0.0/16",
                "PublicAZ1"  : "10.2.100.0/23",
                "PublicAZ2"  : "10.2.102.0/23",
                "PrivateAZ1" : "10.2.0.0/23",
                "PrivateAZ2" : "10.2.2.0/23",
                "NATAZ1"     : "10.2.253.0/24",
                "NATAZ2"     : "10.2.254.0/24"
            },
            "db" : {
                "VPC"        : "10.3.0.0/16",
                "PublicAZ1"  : "10.3.100.0/23",
                "PublicAZ2"  : "10.3.102.0/23",
                "PrivateAZ1" : "10.3.0.0/23",
                "PrivateAZ2" : "10.3.2.0/23",
                "NATAZ1"     : "10.3.253.0/24",
                "NATAZ2"     : "10.3.254.0/24"
            },
            "ecs" : {
                "VPC"        : "10.100.0.0/16",
                "PublicAZ1"  : "10.100.100.0/23",
                "PublicAZ2"  : "10.100.102.0/23",
                "PrivateAZ1" : "10.100.0.0/23",
                "PrivateAZ2" : "10.100.2.0/23",
                "NATAZ1"     : "10.100.253.0/24",
                "NATAZ2"     : "10.100.254.0/24"
            },
            "bastion" : {
                "VPC"        : "10.253.0.0/16",
                "PublicAZ1"  : "10.253.100.0/24",
                "PublicAZ2"  : "10.253.102.0/24"
            },
            "core" : {
                "VPC"        : "10.254.0.0/16",
                "PublicAZ1"  : "10.254.100.0/23",
                "PublicAZ2"  : "10.254.102.0/23",
                "PrivateAZ1" : "10.254.0.0/23",
                "PrivateAZ2" : "10.254.2.0/23",
                "NATAZ1"     : "10.254.253.0/24",
                "NATAZ2"     : "10.254.254.0/24"
            }
        },
        "VPCtoUpper" : {
            "web" : {
                "Name" : "Web"
            },
            "app" : {
                "Name" : "App"
            },
            "db" : {
                "Name" : "DB"
            },
            "ecs" : {
                "Name" : "ECS"
            },
            "core" : {
                "Name" : "Core"
            },
            "ssh" : {
                "Name" : "SSH"
            },
            "bastion" : {
                "Name" : "Bastion"
            }
        },
        "ShortRegion": {
            "us-east-1": { "Name": "use1" },
            "us-west-1": { "Name": "usw1" },
            "us-west-2": { "Name": "usw2" }
        },
        "RegionToVpc" : {
            "us-east-1" : {
                "AvailabilityZone1" : "us-east-1a",
                "AvailabilityZone2" : "us-east-1d"
            },
            "us-west-2" : {
                "AvailabilityZone1" : "us-west-2b",
                "AvailabilityZone2" : "us-west-2c"
            }
        },
        "EnvSwitch" : {
            "prod"    : { "shortenv" : "p" },
            "dev"     : { "shortenv" : "d" },
            "staging" : { "shortenv" : "s" },
            "qa"      : { "shortenv" : "q" }
        }
    },
    "Conditions":{
    },
    "Resources":{
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", { "Ref" : "VPCName" }, "VPC" ] },
                "EnableDnsSupport" : "True",
                "EnableDnsHostnames" : "True",
                "Tags" : [{
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "Name",
                    "Value" :  { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Ref" : "VPCName" }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "InternetGateway" : {
            "Type":"AWS::EC2::InternetGateway",
            "Properties" :{
                "Tags" : [{
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] } ]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Ref" : "VPCName" }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "InternetGatewayAttachement" : {
            "Type":"AWS::EC2::VPCGatewayAttachment",
            "Properties":{
                "InternetGatewayId":{  "Ref":"InternetGateway"},
                "VpcId":{  "Ref":"VPC"}
            }
        },
        "PublicSubnetAZ1" : {
            "Type":"AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionToVpc", { "Ref" : "AWS::Region" }, "AvailabilityZone1"] },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", { "Ref" : "VPCName" }, "PublicAZ1" ] },
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Public", { "Fn::FindInMap" : [ "RegionToVpc", { "Ref" : "AWS::Region" }, "AvailabilityZone1"]}]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "PublicSubnetAZ2" : {
            "Type":"AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionToVpc", { "Ref" : "AWS::Region" }, "AvailabilityZone2"] },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", { "Ref" : "VPCName" }, "PublicAZ2" ] },
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Public", { "Fn::FindInMap" : [ "RegionToVpc", { "Ref" : "AWS::Region" }, "AvailabilityZone1"]}]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "PublicSubnetsRouteTable" : {
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{  "Ref":"VPC" },
                "Tags" : [{
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Public"]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "InternetRoute" : {
            "Type":"AWS::EC2::Route",
            "DependsOn":"InternetGateway",
            "Properties":{
                "RouteTableId":{  "Ref":"PublicSubnetsRouteTable"},
                "DestinationCidrBlock":"0.0.0.0/0",
                "GatewayId":{  "Ref":"InternetGateway"}
            }
        },
        "AssociateRouteTableWithPublicSubnetAZ1" : {
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "RouteTableId":{  "Ref":"PublicSubnetsRouteTable"},
                "SubnetId":{  "Ref":"PublicSubnetAZ1"}
            }
        },
        "AssociateRouteTableWithPublicSubnetAZ2" : {
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "RouteTableId":{  "Ref":"PublicSubnetsRouteTable"},
                "SubnetId":{  "Ref":"PublicSubnetAZ2"}
            }
        },
        "NetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{
                    "Key": "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }]
            }
        },
        "SubnetNetworkAclAssociationPublicSubnetAZ1" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetAZ1" },
                "NetworkAclId" : { "Ref" : "NetworkAcl" }
            }
        },
        "SubnetNetworkAclAssociationPublicSubnetAZ2" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetAZ2" },
                "NetworkAclId" : { "Ref" : "NetworkAcl" }
            }
        },
        "InboundNetworkAclEntry" : {
            "DependsOn" : [ "NetworkAcl" ],
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "NetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "0", "To" : "65535" }
            }
        },
        "OutboundNetworkAclEntry" : {
            "DependsOn" : [ "NetworkAcl" ],
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "NetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "0", "To" : "65535" }
            }
        },
        "InternalSecurityGroup": {
            "DependsOn" : ["VPC"],
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Internal-Traffic" ]]},
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress": [{
                    "IpProtocol" : "-1",
                    "CidrIp": { "Fn::FindInMap" : [ "SubnetConfig", { "Ref" : "VPCName" }, "VPC" ] }
                }],
                "Tags": [{
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Internal-Traffic" ]]}
                }, {
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Domain",
                    "Value" : { "Ref" : "Domain" }
                }]
            }
        },
        "BastionSecurityGroup": {
            "DependsOn" : ["VPC"],
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Bastion-Traffic" ]]},
                "VpcId": {"Ref": "VPC"},
                "SecurityGroupIngress": [{
                    "CidrIp": { "Ref": "SSHFrom" },
                    "IpProtocol" : "tcp",
                    "FromPort": "22",
                    "ToPort": { "Ref": "BastionTcpPort" }
                }],
                "Tags": [{
                    "Key" : "Stack",
                    "Value" : { "Ref": "AWS::StackId" }
                }, {
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Bastion-Traffic" ]]}
                }, {
                    "Key" : "VPCId",
                    "Value" : {"Ref": "VPC"}
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref": "Environment" }
                }, {
                    "Key" : "Region",
                    "Value" : { "Ref": "AWS::Region" }
                }, {
                    "Key" : "Domain",
                    "Value" : {"Ref":"Domain"}
                }]
            }
        },
        "BastionICMPSecurityGroup" : {
            "DependsOn" : ["BastionSecurityGroup"],
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "BastionSecurityGroup" },
                "IpProtocol": "icmp",
                "FromPort": "-1",
                "ToPort": "-1",
                "CidrIp" : { "Fn::FindInMap": [ "SubnetConfig", "core", "VPC" ] },
                "Tags": [{
                    "Key" : "Stack",
                    "Value" : { "Ref": "AWS::StackId" }
                }, {
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : ["-", [ { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }, "Bastion-ICMP" ]]}
                }, {
                    "Key" : "VPCId",
                    "Value" : {"Ref": "VPC"}
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref": "Environment" }
                }, {
                    "Key" : "Region",
                    "Value" : { "Ref": "AWS::Region" }
                }, {
                    "Key" : "Domain",
                    "Value" : {"Ref":"Domain"}
                }]
            }
        },
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "InternetGateway",
            "Properties": {
                "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "BastionInstanceType" }, "Arch" ] } ] },
                "InstanceType": {"Ref": "BastionInstanceType"},
                "KeyName": {"Ref": "KeyName"},
                "IamInstanceProfile": {"Ref": "InstanceProfile"},
                "NetworkInterfaces" : [{
                    "GroupSet"                 : [{ "Ref" : "BastionSecurityGroup" }],
                    "AssociatePublicIpAddress" : "true",
                    "DeviceIndex"              : "0",
                    "DeleteOnTermination"      : "true",
                    "SubnetId"                 : { "Ref" : "PublicSubnet" }
                }],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -v\n",
                    "yum update -y\n",
                    "hostname ", { "Fn::Join" : [".", [ "shared-bastion-001", { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Fn::FindInMap": [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name" ] }, { "Ref" : "Domain" } ]]}, "\n",
                    "sed -i -e 's/HOSTNAME=localhost.localdomain/HOSTNAME=", { "Fn::Join" : [".", [ "shared-bastion-001", { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Fn::FindInMap": [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name" ] }, { "Ref" : "Domain" } ]]}, "/' /etc/sysconfig/network\n",
                    "# Helper function\n",
                    "function error_exit\n",
                    "{\n",
                    "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                    "  exit 1\n",
                    "}\n",
                    "# All is well so signal success\n",
                    "/opt/aws/bin/cfn-signal -e 0 -r \"Setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
                ]]}},
                "Tags": [{
                    "Key" : "Stack",
                    "Value" : { "Ref": "AWS::StackId" }
                }, {
                    "Key" : "Name",
                    "Value" : { "Fn::Join" : [".", [ "shared-bastion-001", { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Fn::FindInMap": [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name" ] }, { "Ref" : "Domain" } ]]}
                }, {
                    "Key" : "VPCId",
                    "Value" : {"Ref": "VPC"}
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref": "Environment" }
                }, {
                    "Key" : "Region",
                    "Value" : { "Ref": "AWS::Region" }
                }, {
                    "Key" : "Domain",
                    "Value" : {"Ref":"Domain"}
                }]
            }
        },
        "DHCPOptions" : {
            "Type" : "AWS::EC2::DHCPOptions",
            "DependsOn" : ["VPC"],
            "Properties" : {
                "DomainName" : { "Fn::Join" : [".", [ { "Ref":"VPCName" }, { "Fn::FindInMap" : [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name"] }, { "Ref" : "Domain" } ]]} ,
                "DomainNameServers" : [ "AmazonProvidedDNS" ],
                "NetbiosNodeType" : 2,
                "Tags" : [{
                    "Key": "Name",
                    "Value": { "Fn::Join" : [".", [ { "Ref":"VPCName" }, { "Fn::FindInMap" : [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name"] }, { "Ref" : "Domain" } ]]}
                },{
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }]
            }
        },
        "AssociateDHCPWithVPC" : {
            "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
            "DependsOn" : [ "DHCPOptions" ],
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "DhcpOptionsId" : {"Ref" : "DHCPOptions"}
            }
        },
        "WaitHandle":{
            "Type":"AWS::CloudFormation::WaitConditionHandle",
            "Properties":{}
        }
    },
   "Outputs":{
        "VPC" : {
            "Description" : "VPC Name",
            "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
        },
        "Region" : {
            "Description" : "AWS Region",
            "Value" : { "Ref" : "AWS::Region" }
        },
        "ShortRegion": {
            "Description": "AWS ShortRegion",
            "Value": { "Fn::FindInMap" : [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name"] }
        },
        "VPCId" : {
            "Description" : "VPC ID",
            "Value" : { "Ref" : "VPC" }
        }
    }
}











        "DHCPOptions" : {
            "Type" : "AWS::EC2::DHCPOptions",
            "DependsOn" : ["VPC"],
            "Properties" : {
                "DomainName" : { "Fn::Join" : [".", [ { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Ref" : "Environment" }, { "Ref" : "AWS::Region" }, { "Ref" : "Domain" } ]]} ,
                "DomainNameServers" : [ "AmazonProvidedDNS" ],
                "NetbiosNodeType" : 2,
                "Tags" : [{
                    "Key": "Name",
                    "Value": { "Fn::Join" : [".", [ { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Ref" : "Environment" }, { "Ref" : "AWS::Region" }, { "Ref" : "Domain" } ]]}
                },{
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }, {
                    "Key" : "VPC",
                    "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
                }, {
                    "Key" : "Environment",
                    "Value" : { "Ref" : "Environment" }
                }]
            }
        },
        "AssociateDHCPWithVPC" : {
            "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
            "DependsOn" : [ "DHCPOptions" ],
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "DhcpOptionsId" : {"Ref" : "DHCPOptions"}
            }
        },
        "Route53Zone" : {
            "Type": "AWS::Route53::HostedZone",
            "DependsOn" : [ "VPC", "AssociateDHCPWithVPC" ],
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "hosted zone for domain.com"
                },
                "Name": { "Fn::Join" : [".", [ { "Fn::FindInMap" : [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name"] }, { "Ref" : "Domain" } ]]},
                "VPCs": [{
                    "VPCId": { "Ref": "VPC" },
                    "VPCRegion": { "Ref": "AWS::Region" }
                }],
                "HostedZoneTags" : [{
                    "Key" : "Stack",
                    "Value" : { "Ref" : "AWS::StackId" }
                }]
            }
        },
        "BastionDNSRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "DependsOn" : ["Route53Zone", "BastionInstance"],
            "Properties" : {
                "HostedZoneName" : { "Fn::Join" : [".", [ { "Fn::FindInMap" : [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name"] }, { "Ref" : "Domain" } ]]},
                "Comment" : "Nat2 A Record",
                "Name" : { "Fn::Join" : [".", [ "shared-bastion-001", { "Fn::FindInMap": [ "EnvSwitch", { "Ref" : "Environment" }, "shortenv" ] }, { "Fn::FindInMap": [ "ShortRegion", { "Ref" : "AWS::Region" }, "Name" ] }, { "Ref" : "Domain" } ]]},
                "Type" : "A",
                "TTL" : "300",
                "ResourceRecords" : [ { "Fn::GetAtt" : [ "BastionInstance", "PrivateIp" ]} ]
            }
        },
        "WaitHandle":{
            "Type":"AWS::CloudFormation::WaitConditionHandle",
            "Properties":{}
        }
   },
   "Outputs":{
        "VPCName" : {
            "Description" : "VPC Name",
            "Value" : { "Fn::FindInMap" : [ "VPCtoUpper", { "Ref" : "VPCName" }, "Name" ] }
        },
        "Region" : {
            "Description" : "AWS Region",
            "Value" : { "Ref" : "AWS::Region" }
        },
        "VPCId" : {
            "Description" : "VPC ID",
            "Value" : { "Ref" : "VPC" }
        },
        "BastionInstanceIP": {
            "Description": "Bastion IP",
            "Value" : { "Fn::GetAtt" : [ "BastionInstance", "PublicIp" ] }
        }
    }
}
